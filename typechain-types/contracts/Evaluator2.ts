/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface Evaluator2Interface extends utils.Interface {
  functions: {
    "assignedRank(address)": FunctionFragment;
    "bytes32ToString(bytes32)": FunctionFragment;
    "ex2a_getAnimalToCreateAttributes()": FunctionFragment;
    "ex7a_breedAnimalWithParents(uint256,uint256)": FunctionFragment;
    "ex7b_offerAnimalForReproduction()": FunctionFragment;
    "ex7c_payForReproduction(uint256)": FunctionFragment;
    "exerciceProgression(address,uint256)": FunctionFragment;
    "hasBeenPaired(address)": FunctionFragment;
    "nextValueStoreRank()": FunctionFragment;
    "readLegs(address)": FunctionFragment;
    "readName(address)": FunctionFragment;
    "readSex(address)": FunctionFragment;
    "readWings(address)": FunctionFragment;
    "setRandomValuesStore(string[20],uint256[20],uint256[20],bool[20])": FunctionFragment;
    "studentExerciceSolution(address)": FunctionFragment;
    "submitExercice(address)": FunctionFragment;
    "teachers(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assignedRank"
      | "bytes32ToString"
      | "ex2a_getAnimalToCreateAttributes"
      | "ex7a_breedAnimalWithParents"
      | "ex7b_offerAnimalForReproduction"
      | "ex7c_payForReproduction"
      | "exerciceProgression"
      | "hasBeenPaired"
      | "nextValueStoreRank"
      | "readLegs"
      | "readName"
      | "readSex"
      | "readWings"
      | "setRandomValuesStore"
      | "studentExerciceSolution"
      | "submitExercice"
      | "teachers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assignedRank",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ex2a_getAnimalToCreateAttributes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex7a_breedAnimalWithParents",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ex7b_offerAnimalForReproduction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ex7c_payForReproduction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exerciceProgression",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasBeenPaired",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextValueStoreRank",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readLegs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readSex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readWings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRandomValuesStore",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "studentExerciceSolution",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitExercice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "teachers",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignedRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex2a_getAnimalToCreateAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex7a_breedAnimalWithParents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex7b_offerAnimalForReproduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ex7c_payForReproduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciceProgression",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasBeenPaired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextValueStoreRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readLegs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readSex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readWings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRandomValuesStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studentExerciceSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitExercice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teachers", data: BytesLike): Result;

  events: {
    "constructedCorrectly(address)": EventFragment;
    "newRandomAnimalAttributes(string,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "constructedCorrectly"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newRandomAnimalAttributes"): EventFragment;
}

export interface constructedCorrectlyEventObject {
  erc20Address: string;
}
export type constructedCorrectlyEvent = TypedEvent<
  [string],
  constructedCorrectlyEventObject
>;

export type constructedCorrectlyEventFilter =
  TypedEventFilter<constructedCorrectlyEvent>;

export interface newRandomAnimalAttributesEventObject {
  name: string;
  legs: BigNumber;
  sex: BigNumber;
  wings: boolean;
}
export type newRandomAnimalAttributesEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  newRandomAnimalAttributesEventObject
>;

export type newRandomAnimalAttributesEventFilter =
  TypedEventFilter<newRandomAnimalAttributesEvent>;

export interface Evaluator2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Evaluator2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assignedRank(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bytes32ToString(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ex2a_getAnimalToCreateAttributes(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ex7a_breedAnimalWithParents(
      parent1: PromiseOrValue<BigNumberish>,
      parent2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ex7b_offerAnimalForReproduction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ex7c_payForReproduction(
      animalAvailableForReproduction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exerciceProgression(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasBeenPaired(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nextValueStoreRank(overrides?: CallOverrides): Promise<[BigNumber]>;

    readLegs(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    readName(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    readSex(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    readWings(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setRandomValuesStore(
      _randomNames: PromiseOrValue<string>[],
      _randomLegs: PromiseOrValue<BigNumberish>[],
      _randomSex: PromiseOrValue<BigNumberish>[],
      _randomWings: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    studentExerciceSolution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    submitExercice(
      studentExercice: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    teachers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  assignedRank(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bytes32ToString(
    _bytes32: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  ex2a_getAnimalToCreateAttributes(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ex7a_breedAnimalWithParents(
    parent1: PromiseOrValue<BigNumberish>,
    parent2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ex7b_offerAnimalForReproduction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ex7c_payForReproduction(
    animalAvailableForReproduction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exerciceProgression(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasBeenPaired(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nextValueStoreRank(overrides?: CallOverrides): Promise<BigNumber>;

  readLegs(
    studentAddres: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readName(
    studentAddres: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  readSex(
    studentAddres: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readWings(
    studentAddres: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setRandomValuesStore(
    _randomNames: PromiseOrValue<string>[],
    _randomLegs: PromiseOrValue<BigNumberish>[],
    _randomSex: PromiseOrValue<BigNumberish>[],
    _randomWings: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  studentExerciceSolution(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  submitExercice(
    studentExercice: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  teachers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    assignedRank(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytes32ToString(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    ex2a_getAnimalToCreateAttributes(overrides?: CallOverrides): Promise<void>;

    ex7a_breedAnimalWithParents(
      parent1: PromiseOrValue<BigNumberish>,
      parent2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ex7b_offerAnimalForReproduction(overrides?: CallOverrides): Promise<void>;

    ex7c_payForReproduction(
      animalAvailableForReproduction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exerciceProgression(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasBeenPaired(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nextValueStoreRank(overrides?: CallOverrides): Promise<BigNumber>;

    readLegs(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readName(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    readSex(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readWings(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRandomValuesStore(
      _randomNames: PromiseOrValue<string>[],
      _randomLegs: PromiseOrValue<BigNumberish>[],
      _randomSex: PromiseOrValue<BigNumberish>[],
      _randomWings: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    studentExerciceSolution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    submitExercice(
      studentExercice: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    teachers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "constructedCorrectly(address)"(
      erc20Address?: null
    ): constructedCorrectlyEventFilter;
    constructedCorrectly(erc20Address?: null): constructedCorrectlyEventFilter;

    "newRandomAnimalAttributes(string,uint256,uint256,bool)"(
      name?: null,
      legs?: null,
      sex?: null,
      wings?: null
    ): newRandomAnimalAttributesEventFilter;
    newRandomAnimalAttributes(
      name?: null,
      legs?: null,
      sex?: null,
      wings?: null
    ): newRandomAnimalAttributesEventFilter;
  };

  estimateGas: {
    assignedRank(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytes32ToString(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ex2a_getAnimalToCreateAttributes(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ex7a_breedAnimalWithParents(
      parent1: PromiseOrValue<BigNumberish>,
      parent2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ex7b_offerAnimalForReproduction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ex7c_payForReproduction(
      animalAvailableForReproduction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exerciceProgression(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasBeenPaired(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextValueStoreRank(overrides?: CallOverrides): Promise<BigNumber>;

    readLegs(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readName(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readSex(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readWings(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRandomValuesStore(
      _randomNames: PromiseOrValue<string>[],
      _randomLegs: PromiseOrValue<BigNumberish>[],
      _randomSex: PromiseOrValue<BigNumberish>[],
      _randomWings: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    studentExerciceSolution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitExercice(
      studentExercice: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    teachers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignedRank(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytes32ToString(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ex2a_getAnimalToCreateAttributes(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ex7a_breedAnimalWithParents(
      parent1: PromiseOrValue<BigNumberish>,
      parent2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ex7b_offerAnimalForReproduction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ex7c_payForReproduction(
      animalAvailableForReproduction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exerciceProgression(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasBeenPaired(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextValueStoreRank(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readLegs(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readName(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readSex(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readWings(
      studentAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRandomValuesStore(
      _randomNames: PromiseOrValue<string>[],
      _randomLegs: PromiseOrValue<BigNumberish>[],
      _randomSex: PromiseOrValue<BigNumberish>[],
      _randomWings: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    studentExerciceSolution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitExercice(
      studentExercice: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    teachers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
